// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	core "github.com/PatrickKoss/rest-simple/internal/core"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStudentService is a mock of StudentService interface.
type MockStudentService struct {
	ctrl     *gomock.Controller
	recorder *MockStudentServiceMockRecorder
}

// MockStudentServiceMockRecorder is the mock recorder for MockStudentService.
type MockStudentServiceMockRecorder struct {
	mock *MockStudentService
}

// NewMockStudentService creates a new mock instance.
func NewMockStudentService(ctrl *gomock.Controller) *MockStudentService {
	mock := &MockStudentService{ctrl: ctrl}
	mock.recorder = &MockStudentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentService) EXPECT() *MockStudentServiceMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStudentService) All() ([]core.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]core.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStudentServiceMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStudentService)(nil).All))
}

// Create mocks base method.
func (m *MockStudentService) Create(student core.CreateStudent) (core.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", student)
	ret0, _ := ret[0].(core.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStudentServiceMockRecorder) Create(student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudentService)(nil).Create), student)
}

// Delete mocks base method.
func (m *MockStudentService) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudentService)(nil).Delete), id)
}

// Update mocks base method.
func (m *MockStudentService) Update(student core.UpdateStudent, id uuid.UUID) (core.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", student, id)
	ret0, _ := ret[0].(core.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStudentServiceMockRecorder) Update(student, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudentService)(nil).Update), student, id)
}
